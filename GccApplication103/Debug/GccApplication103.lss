
GccApplication103.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000a2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000000f6  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000028  00000000  00000000  00000126  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000178  00000000  00000000  0000014e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000125  00000000  00000000  000002c6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000150  00000000  00000000  000003eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000034  00000000  00000000  0000053c  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001ab  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000045  00000000  00000000  0000071b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000018  00000000  00000000  00000760  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  64:	0c 94 4f 00 	jmp	0x9e	; 0x9e <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <_Z10usart_initj>:
#define BAUD 9600
#define UBRR_VAL F_CPU/16/BAUD-1

void usart_init (unsigned int speed)
{
	UBRRH=(unsigned char)(speed>>8);
  6c:	90 bd       	out	0x20, r25	; 32
	UBRRL=(unsigned char) speed;
  6e:	89 b9       	out	0x09, r24	; 9
	UCSRA=0x00;
  70:	1b b8       	out	0x0b, r1	; 11
	UCSRB=(1<<TXEN);
  72:	88 e0       	ldi	r24, 0x08	; 8
  74:	8a b9       	out	0x0a, r24	; 10
	UCSRC=(1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0);
  76:	86 e8       	ldi	r24, 0x86	; 134
  78:	80 bd       	out	0x20, r24	; 32
  7a:	08 95       	ret

0000007c <main>:
}

int main(void)
{
	usart_init(UBRR_VAL);
  7c:	83 e3       	ldi	r24, 0x33	; 51
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	0e 94 36 00 	call	0x6c	; 0x6c <_Z10usart_initj>
	char i=0;
  84:	80 e0       	ldi	r24, 0x00	; 0
    while(1)
    {
     UDR=i;
  86:	8c b9       	out	0x0c, r24	; 12
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  88:	2f ef       	ldi	r18, 0xFF	; 255
  8a:	39 e6       	ldi	r19, 0x69	; 105
  8c:	98 e1       	ldi	r25, 0x18	; 24
  8e:	21 50       	subi	r18, 0x01	; 1
  90:	30 40       	sbci	r19, 0x00	; 0
  92:	90 40       	sbci	r25, 0x00	; 0
  94:	e1 f7       	brne	.-8      	; 0x8e <main+0x12>
  96:	00 c0       	rjmp	.+0      	; 0x98 <main+0x1c>
  98:	00 00       	nop
	 _delay_ms(1000);
	 i+=1;   
  9a:	8f 5f       	subi	r24, 0xFF	; 255
  9c:	f4 cf       	rjmp	.-24     	; 0x86 <main+0xa>

0000009e <_exit>:
  9e:	f8 94       	cli

000000a0 <__stop_program>:
  a0:	ff cf       	rjmp	.-2      	; 0xa0 <__stop_program>
